{"version":3,"sources":["../../../src/lib/tooltip/OHLCTooltip.js"],"names":["OHLCTooltip","props","renderSVG","bind","moreProps","displayValuesFor","xDisplayFormat","accessor","volumeFormat","ohlcFormat","percentFormat","displayTexts","chartConfig","width","height","displayXAccessor","currentItem","item","displayDate","open","high","low","close","volume","percent","na","originProp","origin","x","y","itemsFormat","Object","keys","map","key","itemsToDisplay","children","propTypes","className","string","func","oneOfType","array","fontFamily","fontSize","number","onClick","textFill","labelFill","object","displayTextsDefault","d","o","h","l","c","v","defaultProps","date","defaultDisplay"],"mappings":"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","file":"OHLCTooltip.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { format } from \"d3-format\";\r\nimport { timeFormat } from \"d3-time-format\";\r\nimport displayValuesFor from \"./displayValuesFor\";\r\nimport GenericChartComponent from \"../GenericChartComponent\";\r\n\r\nimport { isDefined, functor } from \"../utils\";\r\nimport ToolTipText from \"./ToolTipText\";\r\nimport ToolTipTSpanLabel from \"./ToolTipTSpanLabel\";\r\n\r\nclass OHLCTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSVG = this.renderSVG.bind(this);\r\n    }\r\n    renderSVG(moreProps) {\r\n        const { displayValuesFor } = this.props;\r\n        const {\r\n            xDisplayFormat,\r\n            accessor,\r\n            volumeFormat,\r\n            ohlcFormat,\r\n            percentFormat,\r\n            displayTexts,\r\n        } = this.props;\r\n\r\n        const {\r\n            chartConfig: { width, height },\r\n        } = moreProps;\r\n        const { displayXAccessor } = moreProps;\r\n\r\n        const currentItem = displayValuesFor(this.props, moreProps);\r\n\r\n        var item = {};\r\n\r\n        let displayDate, open, high, low, close, volume, percent;\r\n        displayDate = open = high = low = close = volume = percent =\r\n            displayTexts.na;\r\n\r\n        if (isDefined(currentItem) && isDefined(accessor(currentItem))) {\r\n            item = accessor(currentItem);\r\n            volume = isDefined(item.volume)\r\n                ? volumeFormat(item.volume)\r\n                : displayTexts.na;\r\n\r\n            displayDate = xDisplayFormat(displayXAccessor(item));\r\n            open = ohlcFormat(item.open);\r\n            high = ohlcFormat(item.high);\r\n            low = ohlcFormat(item.low);\r\n            close = ohlcFormat(item.close);\r\n            percent = percentFormat((item.close - item.open) / item.open);\r\n        }\r\n\r\n        const { origin: originProp } = this.props;\r\n        const origin = functor(originProp);\r\n        const [x, y] = origin(width, height);\r\n\r\n        let itemsFormat = {};\r\n        Object.keys(item).map(\r\n            (key) => (itemsFormat[key] = ohlcFormat(item[key]))\r\n        );\r\n\r\n        const itemsToDisplay = {\r\n            ...itemsFormat,\r\n            displayDate,\r\n            open,\r\n            high,\r\n            low,\r\n            close,\r\n            percent,\r\n            volume,\r\n            x,\r\n            y,\r\n        };\r\n        return this.props.children(this.props, moreProps, itemsToDisplay);\r\n    }\r\n    render() {\r\n        return (\r\n            <GenericChartComponent\r\n                clip={false}\r\n                svgDraw={this.renderSVG}\r\n                drawOn={[\"mousemove\"]}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nOHLCTooltip.propTypes = {\r\n    className: PropTypes.string,\r\n    accessor: PropTypes.func,\r\n    xDisplayFormat: PropTypes.func,\r\n    children: PropTypes.func,\r\n    volumeFormat: PropTypes.func,\r\n    percentFormat: PropTypes.func,\r\n    ohlcFormat: PropTypes.func,\r\n    origin: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\r\n    fontFamily: PropTypes.string,\r\n    fontSize: PropTypes.number,\r\n    onClick: PropTypes.func,\r\n    displayValuesFor: PropTypes.func,\r\n    textFill: PropTypes.string,\r\n    labelFill: PropTypes.string,\r\n    displayTexts: PropTypes.object,\r\n};\r\n\r\nconst displayTextsDefault = {\r\n    d: \"Date: \",\r\n    o: \" O: \",\r\n    h: \" H: \",\r\n    l: \" L: \",\r\n    c: \" C: \",\r\n    v: \" Vol: \",\r\n    na: \"n/a\",\r\n};\r\n\r\nOHLCTooltip.defaultProps = {\r\n    accessor: (d) => {\r\n        return {\r\n            date: d.date,\r\n            open: d.open,\r\n            high: d.high,\r\n            low: d.low,\r\n            close: d.close,\r\n            volume: d.volume,\r\n        };\r\n    },\r\n    xDisplayFormat: timeFormat(\"%Y-%m-%d\"),\r\n    volumeFormat: format(\".4s\"),\r\n    percentFormat: format(\".2%\"),\r\n    ohlcFormat: format(\".2f\"),\r\n    displayValuesFor: displayValuesFor,\r\n    origin: [0, 0],\r\n    children: defaultDisplay,\r\n    displayTexts: displayTextsDefault,\r\n};\r\n\r\nfunction defaultDisplay(props, moreProps, itemsToDisplay) {\r\n    /* eslint-disable */\r\n    const {\r\n        className,\r\n        textFill,\r\n        labelFill,\r\n        onClick,\r\n        fontFamily,\r\n        fontSize,\r\n        displayTexts,\r\n    } = props;\r\n    /* eslint-enable */\r\n\r\n    const {\r\n        displayDate,\r\n        open,\r\n        high,\r\n        low,\r\n        close,\r\n        volume,\r\n        x,\r\n        y,\r\n    } = itemsToDisplay;\r\n    return (\r\n        <g\r\n            className={`react-stockcharts-tooltip-hover ${className}`}\r\n            transform={`translate(${x}, ${y})`}\r\n            onClick={onClick}\r\n        >\r\n            <ToolTipText\r\n                x={0}\r\n                y={0}\r\n                fontFamily={fontFamily}\r\n                fontSize={fontSize}\r\n            >\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label\" x={0} dy=\"5\">\r\n                    {displayTexts.d}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value\" fill={textFill}>\r\n                    {displayDate}\r\n                </tspan>\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_O\">\r\n                    {displayTexts.o}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value_O\" fill={textFill}>\r\n                    {open}\r\n                </tspan>\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_H\">\r\n                    {displayTexts.h}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value_H\" fill={textFill}>\r\n                    {high}\r\n                </tspan>\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_L\">\r\n                    {displayTexts.l}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value_L\" fill={textFill}>\r\n                    {low}\r\n                </tspan>\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_C\">\r\n                    {displayTexts.c}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value_C\" fill={textFill}>\r\n                    {close}\r\n                </tspan>\r\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_Vol\">\r\n                    {displayTexts.v}\r\n                </ToolTipTSpanLabel>\r\n                <tspan key=\"value_Vol\" fill={textFill}>\r\n                    {volume}\r\n                </tspan>\r\n            </ToolTipText>\r\n        </g>\r\n    );\r\n}\r\n\r\nexport default OHLCTooltip;\r\n"]}