{"version":3,"sources":["../../../src/lib/series/BarSeries.js"],"names":["BarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","swapScales","xAccessor","bars","getBars","gAttr","className","clip","propTypes","baseAt","oneOfType","number","func","stroke","bool","width","yAccessor","isRequired","opacity","fill","string","minHeight","defaultProps","xScale","plotData","yScale","chartConfig","getFill","getBase","widthFunctor","offset","Math","floor","filter","d","map","yValue","y","x","round","h","height"],"mappings":"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","file":"BarSeries.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport GenericChartComponent from \"../GenericChartComponent\";\r\nimport { getAxisCanvas } from \"../GenericComponent\";\r\n\r\nimport StackedBarSeries, {\r\n    drawOnCanvasHelper,\r\n    drawOnCanvas2,\r\n    getBarsSVG2,\r\n    svgHelper,\r\n    identityStack,\r\n} from \"./StackedBarSeries\";\r\n\r\nimport { functor, isDefined } from \"../utils\";\r\n\r\nclass BarSeries extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSVG = this.renderSVG.bind(this);\r\n        this.drawOnCanvas = this.drawOnCanvas.bind(this);\r\n    }\r\n    drawOnCanvas(ctx, moreProps) {\r\n        if (this.props.swapScales) {\r\n            const { xAccessor } = moreProps;\r\n            drawOnCanvasHelper(\r\n                ctx,\r\n                this.props,\r\n                moreProps,\r\n                xAccessor,\r\n                identityStack\r\n            );\r\n        } else {\r\n            const bars = getBars(this.props, moreProps);\r\n            drawOnCanvas2(this.props, ctx, bars);\r\n        }\r\n    }\r\n    renderSVG(moreProps) {\r\n        const gAttr = {\r\n            className: this.props.className,\r\n        };\r\n\r\n        if (this.props.swapScales) {\r\n            const { xAccessor } = moreProps;\r\n            return (\r\n                <g {...gAttr}>\r\n                    {svgHelper(this.props, moreProps, xAccessor, identityStack)}\r\n                </g>\r\n            );\r\n        } else {\r\n            const bars = getBars(this.props, moreProps);\r\n            return <g {...gAttr}>{getBarsSVG2(this.props, bars)}</g>;\r\n        }\r\n    }\r\n    render() {\r\n        const { clip } = this.props;\r\n\r\n        return (\r\n            <GenericChartComponent\r\n                clip={clip}\r\n                svgDraw={this.renderSVG}\r\n                canvasToDraw={getAxisCanvas}\r\n                canvasDraw={this.drawOnCanvas}\r\n                drawOn={[\"pan\"]}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nBarSeries.propTypes = {\r\n    baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n    stroke: PropTypes.bool,\r\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n    yAccessor: PropTypes.func.isRequired,\r\n    opacity: PropTypes.number,\r\n    fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n    className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n    clip: PropTypes.bool,\r\n    swapScales: PropTypes.bool,\r\n    minHeight: PropTypes.number,\r\n};\r\n\r\nBarSeries.defaultProps = StackedBarSeries.defaultProps;\r\n\r\nexport default BarSeries;\r\n\r\n/*\r\n Initially, this program was using StackedBarSeries.getBars\r\n to benefit from code reuse and having a single place that\r\n contains the logic for drawing all types of bar charts\r\n simple, grouped, horizontal, but turnes out\r\n making it highly cuztimizable also made it slow for the\r\n most simple case, a regular bar chart.\r\n This function contains just the necessary logic\r\n to create bars\r\n*/\r\nfunction getBars(props, moreProps) {\r\n    const { baseAt, fill, stroke, yAccessor, minHeight } = props;\r\n    const {\r\n        xScale,\r\n        xAccessor,\r\n        plotData,\r\n        chartConfig: { yScale },\r\n    } = moreProps;\r\n\r\n    const getFill = functor(fill);\r\n    const getBase = functor(baseAt);\r\n\r\n    const widthFunctor = functor(props.width);\r\n\r\n    const width = widthFunctor(props, {\r\n        xScale,\r\n        xAccessor,\r\n        plotData,\r\n    });\r\n    /*\r\n\tconst barWidth = Math.round(width);\r\n\tconst offset = Math.round(barWidth === 1 ? 0 : 0.5 * barWidth);\r\n\t*/\r\n    const offset = Math.floor(0.5 * width);\r\n\r\n    const bars = plotData\r\n        .filter((d) => isDefined(yAccessor(d)))\r\n        .map((d) => {\r\n            const yValue = yAccessor(d);\r\n            let y = yScale(yValue);\r\n\r\n            const x = Math.round(xScale(xAccessor(d))) - offset;\r\n            let h = getBase(xScale, yScale, d) - yScale(yValue);\r\n\r\n            if (h < 0) {\r\n                y = y + h;\r\n                h = -h;\r\n            }\r\n\r\n            if (minHeight && yValue > 0) {\r\n                const height = Math.round(h);\r\n\r\n                if (height < minHeight) {\r\n                    y = getBase(xScale, yScale, d) - minHeight;\r\n                    h = minHeight;\r\n                }\r\n            }\r\n\r\n            return {\r\n                // type: \"line\"\r\n                x,\r\n                y: Math.round(y),\r\n                height: Math.round(h),\r\n                width: offset * 2,\r\n                fill: getFill(d, 0),\r\n                stroke: stroke ? getFill(d, 0) : \"none\",\r\n            };\r\n        });\r\n\r\n    return bars;\r\n}\r\n"]}