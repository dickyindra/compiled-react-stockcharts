{"version":3,"sources":["../../../src/lib/calculator/atr.js"],"names":["options","source","open","d","high","low","close","calculator","data","windowSize","trueRangeAlgorithm","undefinedValue","accumulator","prev","values","Math","max","prevATR","atrAlgorithm","skipInitial","tr","atr","newData","undefinedLength","x","arguments","length"],"mappings":";;;;;;;;kBAOe,YAAW;;AAEzB,KAAIA,2CAAJ;AACA,KAAIC,SAAS;AAAA,SAAM,EAAEC,MAAMC,EAAED,IAAV,EAAgBE,MAAMD,EAAEC,IAAxB,EAA8BC,KAAKF,EAAEE,GAArC,EAA0CC,OAAOH,EAAEG,KAAnD,EAAN;AAAA,EAAb;;AAEA,UAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA,iBACFR,OADE;AAAA,MACjBS,UADiB,YACjBA,UADiB;;;AAGzB,MAAMC,qBAAqB,4BACzBD,UADyB,CACd,CADc,EAEzBR,MAFyB,CAElBA,MAFkB,EAGzBU,cAHyB,CAGV;AAAA,UAAKR,EAAEC,IAAF,GAASD,EAAEE,GAAhB;AAAA,GAHU,EAGW;AAHX,GAIzBO,WAJyB,CAIb,kBAAU;AACtB,OAAMC,OAAOC,OAAO,CAAP,CAAb;AACA,OAAMX,IAAIW,OAAO,CAAP,CAAV;AACA,UAAOC,KAAKC,GAAL,CAASb,EAAEC,IAAF,GAASD,EAAEE,GAApB,EACNF,EAAEC,IAAF,GAASS,KAAKP,KADR,EAENH,EAAEE,GAAF,GAAQQ,KAAKP,KAFP,CAAP;AAGA,GAVyB,CAA3B;;AAYA,MAAIW,gBAAJ;;AAEA,MAAMC,eAAe,4BACnBC,WADmB,CACP,CADO,EACJ;AADI,GAEnBV,UAFmB,CAERA,UAFQ,EAGnBG,WAHmB,CAGP,kBAAU;AACtB,OAAMQ,KAAK,iBAAKN,MAAL,CAAX;AACA,OAAMO,MAAM,sBAAUJ,OAAV,IACT,CAAEA,WAAWR,aAAa,CAAxB,CAAD,GAA+BW,EAAhC,IAAsCX,UAD7B,GAET,kBAAIK,MAAJ,IAAcL,UAFjB;;AAIAQ,aAAUI,GAAV;AACA,UAAOA,GAAP;AACA,GAXmB,CAArB;;AAaA,MAAMC,UAAUJ,aAAaR,mBAAmBF,IAAnB,CAAb,CAAhB;;AAEA,SAAOc,OAAP;AACA;AACDf,YAAWgB,eAAX,GAA6B,YAAW;AAAA,kBAChBvB,OADgB;AAAA,MAC/BS,UAD+B,aAC/BA,UAD+B;;AAEvC,SAAOA,aAAa,CAApB;AACA,EAHD;AAIAF,YAAWP,OAAX,GAAqB,UAASwB,CAAT,EAAY;AAChC,MAAI,CAACC,UAAUC,MAAf,EAAuB;AACtB,UAAO1B,OAAP;AACA;AACDA,4DAAkCwB,CAAlC;AACA,SAAOjB,UAAP;AACA,EAND;;AAQAA,YAAWN,MAAX,GAAoB,UAASuB,CAAT,EAAY;AAC/B,MAAI,CAACC,UAAUC,MAAf,EAAuB;AACtB,UAAOzB,MAAP;AACA;AACDA,WAASuB,CAAT;AACA,SAAOjB,UAAP;AACA,EAND;;AAQA,QAAOA,UAAP;AACA,C;;AAjED;;AAEA;;AACA","file":"atr.js","sourcesContent":["\r\n\r\nimport { sum } from \"d3-array\";\r\n\r\nimport { ATR as defaultOptions } from \"./defaultOptionsForComputation\";\r\nimport { slidingWindow, last, isDefined } from \"../utils\";\r\n\r\nexport default function() {\r\n\r\n\tlet options = defaultOptions;\r\n\tlet source = d => ({ open: d.open, high: d.high, low: d.low, close: d.close });\r\n\r\n\tfunction calculator(data) {\r\n\t\tconst { windowSize } = options;\r\n\r\n\t\tconst trueRangeAlgorithm = slidingWindow()\r\n\t\t\t.windowSize(2)\r\n\t\t\t.source(source)\r\n\t\t\t.undefinedValue(d => d.high - d.low) // the first TR value is simply the High minus the Low\r\n\t\t\t.accumulator(values => {\r\n\t\t\t\tconst prev = values[0];\r\n\t\t\t\tconst d = values[1];\r\n\t\t\t\treturn Math.max(d.high - d.low,\r\n\t\t\t\t\td.high - prev.close,\r\n\t\t\t\t\td.low - prev.close);\r\n\t\t\t});\r\n\r\n\t\tlet prevATR;\r\n\r\n\t\tconst atrAlgorithm = slidingWindow()\r\n\t\t\t.skipInitial(1) // trueRange starts from index 1 so ATR starts from 1\r\n\t\t\t.windowSize(windowSize)\r\n\t\t\t.accumulator(values => {\r\n\t\t\t\tconst tr = last(values);\r\n\t\t\t\tconst atr = isDefined(prevATR)\r\n\t\t\t\t\t? ((prevATR * (windowSize - 1)) + tr) / windowSize\r\n\t\t\t\t\t: sum(values) / windowSize;\r\n\r\n\t\t\t\tprevATR = atr;\r\n\t\t\t\treturn atr;\r\n\t\t\t});\r\n\r\n\t\tconst newData = atrAlgorithm(trueRangeAlgorithm(data));\r\n\r\n\t\treturn newData;\r\n\t}\r\n\tcalculator.undefinedLength = function() {\r\n\t\tconst { windowSize } = options;\r\n\t\treturn windowSize - 1;\r\n\t};\r\n\tcalculator.options = function(x) {\r\n\t\tif (!arguments.length) {\r\n\t\t\treturn options;\r\n\t\t}\r\n\t\toptions = { ...defaultOptions, ...x };\r\n\t\treturn calculator;\r\n\t};\r\n\r\n\tcalculator.source = function(x) {\r\n\t\tif (!arguments.length) {\r\n\t\t\treturn source;\r\n\t\t}\r\n\t\tsource = x;\r\n\t\treturn calculator;\r\n\t};\r\n\r\n\treturn calculator;\r\n}\r\n"]}