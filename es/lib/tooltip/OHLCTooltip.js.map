{"version":3,"sources":["../../../../src/lib/tooltip/OHLCTooltip.js"],"names":["React","Component","PropTypes","format","timeFormat","displayValuesFor","GenericChartComponent","isDefined","functor","ToolTipText","ToolTipTSpanLabel","OHLCTooltip","props","renderSVG","bind","moreProps","xDisplayFormat","accessor","volumeFormat","ohlcFormat","percentFormat","displayTexts","chartConfig","width","height","displayXAccessor","currentItem","item","displayDate","open","high","low","close","volume","percent","na","originProp","origin","x","y","itemsFormat","Object","keys","map","key","itemsToDisplay","children","propTypes","className","string","func","oneOfType","array","fontFamily","fontSize","number","onClick","textFill","labelFill","object","displayTextsDefault","d","o","h","l","c","v","defaultProps","date","defaultDisplay"],"mappings":"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","file":"OHLCTooltip.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport displayValuesFor from \"./displayValuesFor\";\nimport GenericChartComponent from \"../GenericChartComponent\";\n\nimport { isDefined, functor } from \"../utils\";\nimport ToolTipText from \"./ToolTipText\";\nimport ToolTipTSpanLabel from \"./ToolTipTSpanLabel\";\n\nclass OHLCTooltip extends Component {\n    constructor(props) {\n        super(props);\n        this.renderSVG = this.renderSVG.bind(this);\n    }\n    renderSVG(moreProps) {\n        const { displayValuesFor } = this.props;\n        const {\n            xDisplayFormat,\n            accessor,\n            volumeFormat,\n            ohlcFormat,\n            percentFormat,\n            displayTexts,\n        } = this.props;\n\n        const {\n            chartConfig: { width, height },\n        } = moreProps;\n        const { displayXAccessor } = moreProps;\n\n        const currentItem = displayValuesFor(this.props, moreProps);\n\n        var item = {};\n\n        let displayDate, open, high, low, close, volume, percent;\n        displayDate = open = high = low = close = volume = percent =\n            displayTexts.na;\n\n        if (isDefined(currentItem) && isDefined(accessor(currentItem))) {\n            item = accessor(currentItem);\n            volume = isDefined(item.volume)\n                ? volumeFormat(item.volume)\n                : displayTexts.na;\n\n            displayDate = xDisplayFormat(displayXAccessor(item));\n            open = ohlcFormat(item.open);\n            high = ohlcFormat(item.high);\n            low = ohlcFormat(item.low);\n            close = ohlcFormat(item.close);\n            percent = percentFormat((item.close - item.open) / item.open);\n        }\n\n        const { origin: originProp } = this.props;\n        const origin = functor(originProp);\n        const [x, y] = origin(width, height);\n\n        let itemsFormat = {};\n        Object.keys(item).map(\n            (key) => (itemsFormat[key] = ohlcFormat(item[key]))\n        );\n\n        const itemsToDisplay = {\n            ...itemsFormat,\n            displayDate,\n            open,\n            high,\n            low,\n            close,\n            percent,\n            volume,\n            x,\n            y,\n        };\n        return this.props.children(this.props, moreProps, itemsToDisplay);\n    }\n    render() {\n        return (\n            <GenericChartComponent\n                clip={false}\n                svgDraw={this.renderSVG}\n                drawOn={[\"mousemove\"]}\n            />\n        );\n    }\n}\n\nOHLCTooltip.propTypes = {\n    className: PropTypes.string,\n    accessor: PropTypes.func,\n    xDisplayFormat: PropTypes.func,\n    children: PropTypes.func,\n    volumeFormat: PropTypes.func,\n    percentFormat: PropTypes.func,\n    ohlcFormat: PropTypes.func,\n    origin: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n    fontFamily: PropTypes.string,\n    fontSize: PropTypes.number,\n    onClick: PropTypes.func,\n    displayValuesFor: PropTypes.func,\n    textFill: PropTypes.string,\n    labelFill: PropTypes.string,\n    displayTexts: PropTypes.object,\n};\n\nconst displayTextsDefault = {\n    d: \"Date: \",\n    o: \" O: \",\n    h: \" H: \",\n    l: \" L: \",\n    c: \" C: \",\n    v: \" Vol: \",\n    na: \"n/a\",\n};\n\nOHLCTooltip.defaultProps = {\n    accessor: (d) => {\n        return {\n            date: d.date,\n            open: d.open,\n            high: d.high,\n            low: d.low,\n            close: d.close,\n            volume: d.volume,\n        };\n    },\n    xDisplayFormat: timeFormat(\"%Y-%m-%d\"),\n    volumeFormat: format(\".4s\"),\n    percentFormat: format(\".2%\"),\n    ohlcFormat: format(\".2f\"),\n    displayValuesFor: displayValuesFor,\n    origin: [0, 0],\n    children: defaultDisplay,\n    displayTexts: displayTextsDefault,\n};\n\nfunction defaultDisplay(props, moreProps, itemsToDisplay) {\n    /* eslint-disable */\n    const {\n        className,\n        textFill,\n        labelFill,\n        onClick,\n        fontFamily,\n        fontSize,\n        displayTexts,\n    } = props;\n    /* eslint-enable */\n\n    const {\n        displayDate,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        x,\n        y,\n    } = itemsToDisplay;\n    return (\n        <g\n            className={`react-stockcharts-tooltip-hover ${className}`}\n            transform={`translate(${x}, ${y})`}\n            onClick={onClick}\n        >\n            <ToolTipText\n                x={0}\n                y={0}\n                fontFamily={fontFamily}\n                fontSize={fontSize}\n            >\n                <ToolTipTSpanLabel fill={labelFill} key=\"label\" x={0} dy=\"5\">\n                    {displayTexts.d}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value\" fill={textFill}>\n                    {displayDate}\n                </tspan>\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_O\">\n                    {displayTexts.o}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value_O\" fill={textFill}>\n                    {open}\n                </tspan>\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_H\">\n                    {displayTexts.h}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value_H\" fill={textFill}>\n                    {high}\n                </tspan>\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_L\">\n                    {displayTexts.l}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value_L\" fill={textFill}>\n                    {low}\n                </tspan>\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_C\">\n                    {displayTexts.c}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value_C\" fill={textFill}>\n                    {close}\n                </tspan>\n                <ToolTipTSpanLabel fill={labelFill} key=\"label_Vol\">\n                    {displayTexts.v}\n                </ToolTipTSpanLabel>\n                <tspan key=\"value_Vol\" fill={textFill}>\n                    {volume}\n                </tspan>\n            </ToolTipText>\n        </g>\n    );\n}\n\nexport default OHLCTooltip;\n"]}