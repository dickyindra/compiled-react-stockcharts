{"version":3,"sources":["../../../../src/lib/coordinates/EdgeCoordinateV3.js"],"names":["React","hexToRGBA","isDefined","getStrokeDasharray","renderSVG","props","className","edge","helper","line","coordinateBase","coordinate","opacity","stroke","strokeDasharray","x1","y1","x2","y2","rectWidth","rectHeight","arrowWidth","path","orient","edgeXRect","edgeYRect","strokeOpacity","strokeWidth","fill","edgeXText","edgeYText","textAnchor","fontFamily","fontSize","textFill","displayCoordinate","show","type","edgeAt","hideLine","lineStrokeDasharray","lineStroke","lineOpacity","rectRadius","dx","dy","undefined","drawOnCanvas","ctx","font","textBaseline","width","Math","round","measureText","dashArray","split","map","d","setLineDash","strokeStyle","lineWidth","beginPath","moveTo","lineTo","fillStyle","x","y","halfHeight","closePath","roundRect","rect","textAlign","fillText","height","radius","quadraticCurveTo"],"mappings":"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","file":"EdgeCoordinateV3.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { hexToRGBA, isDefined, getStrokeDasharray } from \"../utils\";\r\n\r\n/* eslint-disable react/prop-types */\r\nexport function renderSVG(props) {\r\n    const { className } = props;\r\n\r\n    const edge = helper(props);\r\n    if (edge === null) return null;\r\n    let line, coordinateBase, coordinate;\r\n\r\n    if (isDefined(edge.line)) {\r\n        line = (\r\n            <line\r\n                className=\"react-stockcharts-cross-hair\"\r\n                strokeOpacity={edge.line.opacity}\r\n                stroke={edge.line.stroke}\r\n                strokeDasharray={getStrokeDasharray(edge.line.strokeDasharray)}\r\n                x1={edge.line.x1}\r\n                y1={edge.line.y1}\r\n                x2={edge.line.x2}\r\n                y2={edge.line.y2}\r\n            />\r\n        );\r\n    }\r\n    if (isDefined(edge.coordinateBase)) {\r\n        const { rectWidth, rectHeight, arrowWidth } = edge.coordinateBase;\r\n\r\n        const path =\r\n            edge.orient === \"left\"\r\n                ? `M0,0L0,${rectHeight}L${rectWidth},${rectHeight}L${\r\n                      rectWidth + arrowWidth\r\n                  },10L${rectWidth},0L0,0L0,0`\r\n                : `M0,${arrowWidth}L${arrowWidth},${rectHeight}L${\r\n                      rectWidth + arrowWidth\r\n                  },${rectHeight}L${\r\n                      rectWidth + arrowWidth\r\n                  },0L${arrowWidth},0L0,${arrowWidth}`;\r\n\r\n        coordinateBase =\r\n            edge.orient === \"left\" || edge.orient === \"right\" ? (\r\n                <g\r\n                    key={1}\r\n                    transform={`translate(${edge.coordinateBase.edgeXRect},${edge.coordinateBase.edgeYRect})`}\r\n                >\r\n                    <path\r\n                        d={path}\r\n                        className=\"react-stockchart-text-background\"\r\n                        height={rectHeight}\r\n                        width={rectWidth}\r\n                        stroke={edge.coordinateBase.stroke}\r\n                        strokeLinejoin=\"miter\"\r\n                        strokeOpacity={edge.coordinateBase.strokeOpacity}\r\n                        strokeWidth={edge.coordinateBase.strokeWidth}\r\n                        fill={edge.coordinateBase.fill}\r\n                        fillOpacity={edge.coordinateBase.opacity}\r\n                    />\r\n                </g>\r\n            ) : (\r\n                <rect\r\n                    key={1}\r\n                    className=\"react-stockchart-text-background\"\r\n                    x={edge.coordinateBase.edgeXRect}\r\n                    y={edge.coordinateBase.edgeYRect}\r\n                    height={rectHeight}\r\n                    width={rectWidth}\r\n                    fill={edge.coordinateBase.fill}\r\n                    opacity={edge.coordinateBase.opacity}\r\n                />\r\n            );\r\n\r\n        coordinate = (\r\n            <text\r\n                key={2}\r\n                x={edge.coordinate.edgeXText}\r\n                y={edge.coordinate.edgeYText}\r\n                textAnchor={edge.coordinate.textAnchor}\r\n                fontFamily={edge.coordinate.fontFamily}\r\n                fontSize={edge.coordinate.fontSize}\r\n                dy=\".32em\"\r\n                fill={edge.coordinate.textFill}\r\n            >\r\n                {edge.coordinate.displayCoordinate}\r\n            </text>\r\n        );\r\n    }\r\n    return (\r\n        <g className={className}>\r\n            {line}\r\n            {coordinateBase}\r\n            {coordinate}\r\n        </g>\r\n    );\r\n}\r\n/* eslint-enable react/prop-types */\r\n\r\nfunction helper(props) {\r\n    const {\r\n        coordinate: displayCoordinate,\r\n        show,\r\n        type,\r\n        orient,\r\n        edgeAt,\r\n        hideLine,\r\n        lineStrokeDasharray,\r\n    } = props;\r\n    const {\r\n        fill,\r\n        opacity,\r\n        fontFamily,\r\n        fontSize,\r\n        textFill,\r\n        lineStroke,\r\n        lineOpacity,\r\n    } = props;\r\n    const { stroke, strokeOpacity, strokeWidth } = props;\r\n    const { arrowWidth, rectWidth, rectHeight, rectRadius } = props;\r\n    const { x1, y1, x2, y2, dx } = props;\r\n\r\n    if (!show) return null;\r\n\r\n    let coordinateBase, coordinate;\r\n    if (isDefined(displayCoordinate)) {\r\n        const textAnchor = \"middle\"; // TODO: Below it is necessary to implement logic for the possibility of alignment from the right or from the left.\r\n\r\n        let edgeXRect, edgeYRect, edgeXText, edgeYText;\r\n\r\n        if (type === \"horizontal\") {\r\n            edgeXRect =\r\n                dx + (orient === \"right\" ? edgeAt + 1 : edgeAt - rectWidth - 1);\r\n            edgeYRect = y1 - rectHeight / 2 - strokeWidth;\r\n            edgeXText =\r\n                dx +\r\n                (orient === \"right\"\r\n                    ? edgeAt + rectWidth / 2\r\n                    : edgeAt - rectWidth / 2);\r\n            edgeYText = y1;\r\n        } else {\r\n            const dy = orient === \"bottom\" ? strokeWidth - 1 : -strokeWidth + 1;\r\n            edgeXRect = x1 < rectWidth / 2 ? 0 : x1 - rectWidth / 2 + 4;\r\n\r\n            edgeYRect =\r\n                (orient === \"bottom\" ? edgeAt : edgeAt - rectHeight) + dy;\r\n            edgeXText = x1 < rectWidth / 2 ? rectWidth / 2 : x1 + 4;\r\n            edgeYText =\r\n                (orient === \"bottom\"\r\n                    ? edgeAt + rectHeight / 2\r\n                    : edgeAt - rectHeight / 2) + dy;\r\n        }\r\n\r\n        coordinateBase = {\r\n            edgeXRect,\r\n            edgeYRect,\r\n            rectHeight: rectHeight + strokeWidth,\r\n            rectWidth,\r\n            rectRadius,\r\n            fill,\r\n            opacity,\r\n            arrowWidth,\r\n            stroke,\r\n            strokeOpacity,\r\n            strokeWidth,\r\n        };\r\n        coordinate = {\r\n            edgeXText,\r\n            edgeYText,\r\n            textAnchor,\r\n            fontFamily,\r\n            fontSize,\r\n            textFill,\r\n            displayCoordinate,\r\n        };\r\n    }\r\n\r\n    const line = hideLine\r\n        ? undefined\r\n        : {\r\n              opacity: lineOpacity,\r\n              stroke: lineStroke,\r\n              strokeDasharray: lineStrokeDasharray,\r\n              x1,\r\n              y1,\r\n              x2,\r\n              y2,\r\n          };\r\n\r\n    return {\r\n        coordinateBase,\r\n        coordinate,\r\n        line,\r\n        orient,\r\n    };\r\n}\r\n\r\nexport function drawOnCanvas(ctx, props) {\r\n    const { fontSize, fontFamily } = props;\r\n\r\n    ctx.font = `${fontSize}px ${fontFamily}`;\r\n    ctx.textBaseline = \"middle\";\r\n    const width = Math.round(ctx.measureText(props.coordinate).width + 10);\r\n\r\n    const edge = helper({ ...props, rectWidth: width });\r\n\r\n    if (edge === null) return;\r\n\r\n    if (isDefined(edge.line)) {\r\n        const dashArray = getStrokeDasharray(edge.line.strokeDasharray)\r\n            .split(\",\")\r\n            .map((d) => +d);\r\n        ctx.setLineDash(dashArray);\r\n        ctx.strokeStyle = hexToRGBA(edge.line.stroke, edge.line.opacity);\r\n        ctx.lineWidth = 1;\r\n        ctx.beginPath();\r\n        ctx.moveTo(edge.line.x1, edge.line.y1);\r\n        ctx.lineTo(edge.line.x2, edge.line.y2);\r\n        ctx.stroke();\r\n    }\r\n\r\n    ctx.setLineDash([]);\r\n    if (isDefined(edge.coordinateBase)) {\r\n        const {\r\n            rectWidth,\r\n            rectHeight,\r\n            rectRadius,\r\n            arrowWidth,\r\n        } = edge.coordinateBase;\r\n\r\n        ctx.fillStyle = hexToRGBA(\r\n            edge.coordinateBase.fill,\r\n            edge.coordinateBase.opacity\r\n        );\r\n        if (isDefined(edge.coordinateBase.stroke)) {\r\n            ctx.strokeStyle = hexToRGBA(\r\n                edge.coordinateBase.stroke,\r\n                edge.coordinateBase.strokeOpacity\r\n            );\r\n            ctx.lineWidth = edge.coordinateBase.strokeWidth;\r\n        }\r\n\r\n        let x = edge.coordinateBase.edgeXRect;\r\n        const y = edge.coordinateBase.edgeYRect;\r\n        const halfHeight = rectHeight / 2;\r\n\r\n        ctx.beginPath();\r\n        if (edge.orient === \"right\") {\r\n            x -= arrowWidth;\r\n            ctx.moveTo(x, y + halfHeight);\r\n            ctx.lineTo(x + arrowWidth, y);\r\n            ctx.lineTo(x + rectWidth + arrowWidth, y);\r\n            ctx.lineTo(x + rectWidth + arrowWidth, y + rectHeight);\r\n            ctx.lineTo(x + arrowWidth, y + rectHeight);\r\n            ctx.closePath();\r\n        } else if (edge.orient === \"left\") {\r\n            // x += arrowWidth;\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x + rectWidth, y);\r\n            ctx.lineTo(x + rectWidth + arrowWidth, y + halfHeight);\r\n            ctx.lineTo(x + rectWidth, y + rectHeight);\r\n            ctx.lineTo(x, y + rectHeight);\r\n            ctx.closePath();\r\n        } else {\r\n            // console.error(x, y, rectWidth, rectHeight)\r\n            if (rectRadius) {\r\n                roundRect(ctx, x, y, rectWidth, rectHeight, 3);\r\n            } else {\r\n                ctx.rect(x, y, rectWidth, rectHeight);\r\n            }\r\n        }\r\n        ctx.fill();\r\n\r\n        if (isDefined(edge.coordinateBase.stroke)) {\r\n            ctx.stroke();\r\n        }\r\n\r\n        ctx.fillStyle = edge.coordinate.textFill;\r\n        ctx.textAlign =\r\n            edge.coordinate.textAnchor === \"middle\"\r\n                ? \"center\"\r\n                : edge.coordinate.textAnchor;\r\n        ctx.fillText(\r\n            edge.coordinate.displayCoordinate,\r\n            edge.coordinate.edgeXText,\r\n            edge.coordinate.edgeYText\r\n        );\r\n    }\r\n}\r\n\r\nfunction roundRect(ctx, x, y, width, height, radius) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + radius, y);\r\n    ctx.lineTo(x + width - radius, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n    ctx.lineTo(x + width, y + height - radius);\r\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n    ctx.lineTo(x + radius, y + height);\r\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n    ctx.lineTo(x, y + radius);\r\n    ctx.quadraticCurveTo(x, y, x + radius, y);\r\n    ctx.closePath();\r\n}\r\n\r\n// export default EdgeCoordinate;\r\n"]}