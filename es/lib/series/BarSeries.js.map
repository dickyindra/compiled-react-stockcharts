{"version":3,"sources":["../../../../src/lib/series/BarSeries.js"],"names":["React","Component","PropTypes","GenericChartComponent","getAxisCanvas","StackedBarSeries","drawOnCanvasHelper","drawOnCanvas2","getBarsSVG2","svgHelper","identityStack","functor","isDefined","BarSeries","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","swapScales","xAccessor","bars","getBars","gAttr","className","clip","propTypes","baseAt","oneOfType","number","func","stroke","bool","width","yAccessor","isRequired","opacity","fill","string","minHeight","defaultProps","xScale","plotData","yScale","chartConfig","getFill","getBase","widthFunctor","offset","Math","floor","filter","d","map","yValue","y","x","round","h","console","log","ifone","height","iftwo"],"mappings":"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","file":"BarSeries.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getAxisCanvas } from \"../GenericComponent\";\n\nimport StackedBarSeries, {\n    drawOnCanvasHelper,\n    drawOnCanvas2,\n    getBarsSVG2,\n    svgHelper,\n    identityStack,\n} from \"./StackedBarSeries\";\n\nimport { functor, isDefined } from \"../utils\";\n\nclass BarSeries extends Component {\n    constructor(props) {\n        super(props);\n        this.renderSVG = this.renderSVG.bind(this);\n        this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    }\n    drawOnCanvas(ctx, moreProps) {\n        if (this.props.swapScales) {\n            const { xAccessor } = moreProps;\n            drawOnCanvasHelper(\n                ctx,\n                this.props,\n                moreProps,\n                xAccessor,\n                identityStack\n            );\n        } else {\n            const bars = getBars(this.props, moreProps);\n            drawOnCanvas2(this.props, ctx, bars);\n        }\n    }\n    renderSVG(moreProps) {\n        const gAttr = {\n            className: this.props.className,\n        };\n\n        if (this.props.swapScales) {\n            const { xAccessor } = moreProps;\n            return (\n                <g {...gAttr}>\n                    {svgHelper(this.props, moreProps, xAccessor, identityStack)}\n                </g>\n            );\n        } else {\n            const bars = getBars(this.props, moreProps);\n            return <g {...gAttr}>{getBarsSVG2(this.props, bars)}</g>;\n        }\n    }\n    render() {\n        const { clip } = this.props;\n\n        return (\n            <GenericChartComponent\n                clip={clip}\n                svgDraw={this.renderSVG}\n                canvasToDraw={getAxisCanvas}\n                canvasDraw={this.drawOnCanvas}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n}\n\nBarSeries.propTypes = {\n    baseAt: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    stroke: PropTypes.bool,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    yAccessor: PropTypes.func.isRequired,\n    opacity: PropTypes.number,\n    fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    clip: PropTypes.bool,\n    swapScales: PropTypes.bool,\n    minHeight: PropTypes.number,\n};\n\nBarSeries.defaultProps = StackedBarSeries.defaultProps;\n\nexport default BarSeries;\n\n/*\n Initially, this program was using StackedBarSeries.getBars\n to benefit from code reuse and having a single place that\n contains the logic for drawing all types of bar charts\n simple, grouped, horizontal, but turnes out\n making it highly cuztimizable also made it slow for the\n most simple case, a regular bar chart.\n This function contains just the necessary logic\n to create bars\n*/\nfunction getBars(props, moreProps) {\n    const { baseAt, fill, stroke, yAccessor, minHeight } = props;\n    const {\n        xScale,\n        xAccessor,\n        plotData,\n        chartConfig: { yScale },\n    } = moreProps;\n\n    const getFill = functor(fill);\n    const getBase = functor(baseAt);\n\n    const widthFunctor = functor(props.width);\n\n    const width = widthFunctor(props, {\n        xScale,\n        xAccessor,\n        plotData,\n    });\n    /*\n\tconst barWidth = Math.round(width);\n\tconst offset = Math.round(barWidth === 1 ? 0 : 0.5 * barWidth);\n\t*/\n    const offset = Math.floor(0.5 * width);\n\n    const bars = plotData\n        .filter((d) => isDefined(yAccessor(d)))\n        .map((d) => {\n            const yValue = yAccessor(d);\n            let y = yScale(yValue);\n\n            const x = Math.round(xScale(xAccessor(d))) - offset;\n            let h = getBase(xScale, yScale, d) - yScale(yValue);\n\n            if (h < 0) {\n                y = y + h;\n                h = -h;\n            }\n\n            console.log(\"BarSeries\", {\n                minHeight: minHeight,\n                y: y,\n                yValue: yValue,\n                ifone: minHeight && yValue > 0,\n                height: Math.round(h),\n                iftwo: Math.round(h) < minHeight,\n            });\n\n            if (minHeight && yValue > 0) {\n                const height = Math.round(h);\n\n                if (height < minHeight) {\n                    h = minHeight;\n                }\n            }\n\n            console.log(\"BarSeries\", h);\n\n            return {\n                // type: \"line\"\n                x,\n                y: Math.round(y),\n                height: Math.round(h),\n                width: offset * 2,\n                fill: getFill(d, 0),\n                stroke: stroke ? getFill(d, 0) : \"none\",\n            };\n        });\n\n    return bars;\n}\n"]}