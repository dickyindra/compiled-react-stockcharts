{"version":3,"sources":["../../../../src/lib/interactive/InteractiveText.js"],"names":["React","Component","PropTypes","isDefined","noop","getValueFromOverride","terminate","saveNodeType","isHoverForInteractiveType","EachText","HoverTextNearMouse","GenericChartComponent","getMouseCanvas","InteractiveText","props","handleDraw","bind","handleDrag","handleDragComplete","getSelectionState","nodes","state","index","position","setState","override","moreProps","textList","newTextList","map","each","idx","selected","onDragComplete","xyValue","current","start","end","e","enabled","mouseXY","mouseY","yScale","chartConfig","xAccessor","currentItem","invert","defaultText","onChoosePosition","newText","hoverText","defaultHoverText","defaultProps","propTypes","func","isRequired","onSelect","shape","bgFill","string","bgOpacity","number","bgStrokeWidth","bgStroke","textFill","fontFamily","fontWeight","fontStyle","fontSize","text","object","array","bool","enable","bgHeight","bgWidth","selectedText","contextTypes","subscribe","unsubscribe","generateSubscriptionId","chartId","oneOfType"],"mappings":"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","file":"InteractiveText.js","sourcesContent":["\r\n\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { isDefined, noop } from \"../utils\";\r\n\r\nimport {\r\n\tgetValueFromOverride,\r\n\tterminate,\r\n\tsaveNodeType,\r\n\tisHoverForInteractiveType,\r\n} from \"./utils\";\r\nimport EachText from \"./wrapper/EachText\";\r\nimport HoverTextNearMouse from \"./components/HoverTextNearMouse\";\r\nimport GenericChartComponent from \"../GenericChartComponent\";\r\nimport { getMouseCanvas } from \"../GenericComponent\";\r\n\r\nclass InteractiveText extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleDraw = this.handleDraw.bind(this);\r\n\t\tthis.handleDrag = this.handleDrag.bind(this);\r\n\t\tthis.handleDragComplete = this.handleDragComplete.bind(this);\r\n\t\tthis.terminate = terminate.bind(this);\r\n\r\n\t\tthis.saveNodeType = saveNodeType.bind(this);\r\n\t\tthis.getSelectionState = isHoverForInteractiveType(\"textList\")\r\n\t\t\t.bind(this);\r\n\r\n\t\tthis.nodes = [];\r\n\t\tthis.state = {};\r\n\t}\r\n\thandleDrag(index, position) {\r\n\t\tthis.setState({\r\n\t\t\toverride: {\r\n\t\t\t\tindex,\r\n\t\t\t\tposition,\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\thandleDragComplete(moreProps) {\r\n\t\tconst { override } = this.state;\r\n\t\tif (isDefined(override)) {\r\n\t\t\tconst { textList } = this.props;\r\n\t\t\tconst newTextList = textList\r\n\t\t\t\t.map((each, idx) => {\r\n\t\t\t\t\tconst selected = (idx === override.index);\r\n\t\t\t\t\treturn selected\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t...each,\r\n\t\t\t\t\t\t\tposition: override.position,\r\n\t\t\t\t\t\t\tselected,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t...each,\r\n\t\t\t\t\t\t\tselected\r\n\t\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\tthis.setState({\r\n\t\t\t\toverride: null,\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.props.onDragComplete(newTextList, moreProps);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\thandleDrawLine(xyValue) {\r\n\t\tconst { current } = this.state;\r\n\r\n\t\tif (isDefined(current) && isDefined(current.start)) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrent: {\r\n\t\t\t\t\tstart: current.start,\r\n\t\t\t\t\tend: xyValue,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\thandleDraw(moreProps, e) {\r\n\t\tconst { enabled } = this.props;\r\n\t\tif (enabled) {\r\n\t\t\tconst {\r\n\t\t\t\tmouseXY: [, mouseY],\r\n\t\t\t\tchartConfig: { yScale },\r\n\t\t\t\txAccessor,\r\n\t\t\t\tcurrentItem,\r\n\t\t\t} = moreProps;\r\n\r\n\t\t\tconst xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\r\n\r\n\t\t\tconst { defaultText, onChoosePosition } = this.props;\r\n\r\n\t\t\tconst newText = {\r\n\t\t\t\t...defaultText,\r\n\t\t\t\tposition: xyValue,\r\n\t\t\t};\r\n\t\t\tonChoosePosition(newText, moreProps, e);\r\n\t\t}/*  else {\r\n\t\t\tthis.handleClick(moreProps, e);\r\n\t\t} */\r\n\t}\r\n\trender() {\r\n\t\tconst { textList, defaultText, hoverText } = this.props;\r\n\t\tconst { override } = this.state;\r\n\t\treturn <g>\r\n\t\t\t{textList.map((each, idx) => {\r\n\t\t\t\tconst defaultHoverText = InteractiveText.defaultProps.hoverText;\r\n\t\t\t\tconst props = {\r\n\t\t\t\t\t...defaultText,\r\n\t\t\t\t\t...each,\r\n\t\t\t\t\thoverText: {\r\n\t\t\t\t\t\t...defaultHoverText,\r\n\t\t\t\t\t\t...hoverText,\r\n\t\t\t\t\t\t...(each.hoverText || {})\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t\treturn <EachText key={idx}\r\n\t\t\t\t\tref={this.saveNodeType(idx)}\r\n\t\t\t\t\tindex={idx}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t\tselected={each.selected}\r\n\t\t\t\t\tposition={getValueFromOverride(override, idx, \"position\", each.position)}\r\n\r\n\t\t\t\t\tonDrag={this.handleDrag}\r\n\t\t\t\t\tonDragComplete={this.handleDragComplete}\r\n\t\t\t\t\tedgeInteractiveCursor=\"react-stockcharts-move-cursor\"\r\n\t\t\t\t/>;\r\n\t\t\t})}\r\n\t\t\t<GenericChartComponent\r\n\r\n\t\t\t\tonClick={this.handleDraw}\r\n\r\n\t\t\t\tsvgDraw={noop}\r\n\t\t\t\tcanvasDraw={noop}\r\n\t\t\t\tcanvasToDraw={getMouseCanvas}\r\n\r\n\t\t\t\tdrawOn={[\"mousemove\", \"pan\"]}\r\n\t\t\t/>;\r\n\t\t</g>;\r\n\t}\r\n}\r\n\r\nInteractiveText.propTypes = {\r\n\tonChoosePosition: PropTypes.func.isRequired,\r\n\tonDragComplete: PropTypes.func.isRequired,\r\n\tonSelect: PropTypes.func,\r\n\r\n\tdefaultText: PropTypes.shape({\r\n\t\tbgFill: PropTypes.string.isRequired,\r\n\t\tbgOpacity: PropTypes.number.isRequired,\r\n\t\tbgStrokeWidth: PropTypes.number,\r\n\t\tbgStroke: PropTypes.string,\r\n\t\ttextFill: PropTypes.string.isRequired,\r\n\t\tfontFamily: PropTypes.string.isRequired,\r\n\t\tfontWeight: PropTypes.string.isRequired,\r\n\t\tfontStyle: PropTypes.string.isRequired,\r\n\t\tfontSize: PropTypes.number.isRequired,\r\n\t\ttext: PropTypes.string.isRequired,\r\n\t}).isRequired,\r\n\r\n\thoverText: PropTypes.object.isRequired,\r\n\ttextList: PropTypes.array.isRequired,\r\n\tenabled: PropTypes.bool.isRequired,\r\n};\r\n\r\nInteractiveText.defaultProps = {\r\n\tonChoosePosition: noop,\r\n\tonDragComplete: noop,\r\n\tonSelect: noop,\r\n\r\n\tdefaultText: {\r\n\t\tbgFill: \"#D3D3D3\",\r\n\t\tbgOpacity: 1,\r\n\t\tbgStrokeWidth: 1,\r\n\t\ttextFill: \"#F10040\",\r\n\t\tfontFamily: \"Helvetica Neue, Helvetica, Arial, sans-serif\",\r\n\t\tfontSize: 12,\r\n\t\tfontStyle: \"normal\",\r\n\t\tfontWeight: \"normal\",\r\n\t\ttext: \"Lorem ipsum...\"\r\n\t},\r\n\thoverText: {\r\n\t\t...HoverTextNearMouse.defaultProps,\r\n\t\tenable: true,\r\n\t\tbgHeight: \"auto\",\r\n\t\tbgWidth: \"auto\",\r\n\t\ttext: \"Click to select object\",\r\n\t\tselectedText: \"\",\r\n\t},\r\n\ttextList: [],\r\n};\r\n\r\nInteractiveText.contextTypes = {\r\n\tsubscribe: PropTypes.func.isRequired,\r\n\tunsubscribe: PropTypes.func.isRequired,\r\n\tgenerateSubscriptionId: PropTypes.func.isRequired,\r\n\tchartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n};\r\n\r\nexport default InteractiveText;\r\n"]}